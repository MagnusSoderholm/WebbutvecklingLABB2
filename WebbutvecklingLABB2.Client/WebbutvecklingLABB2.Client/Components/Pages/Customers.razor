@page "/customers"
@using WebbutvecklingLABB2.Shared.Models
@using WebbutvecklingLABB2.Client.Services
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h3>Kundlista</h3>

<div class="mb-3">
    <input type="text" class="form-control d-inline-block" style="width: 250px;" placeholder="Sök på e-post..." @bind="searchTerm" />
    <button class="btn btn-primary ml-2" @onclick="SearchCustomers">Sök</button>
    <button class="btn btn-secondary ml-2" @onclick="ClearSearch">Rensa</button>
</div>

<button class="btn btn-success mb-3" @onclick="NavigateToRegister">Registrera ny kund</button>

@if (filteredCustomers == null)
{
    <p>Laddar...</p>
}
else if (!filteredCustomers.Any())
{
    <p>Inga kunder hittades.</p>
}
else
{
    @foreach (var customer in filteredCustomers)
    {
        <div class="customer-card mb-3 border p-3 rounded shadow-sm">
            <h4>@customer.FirstName @customer.LastName</h4>
            <p><strong>Email:</strong> @customer.Email</p>
            <p><strong>Telefon:</strong> @customer.PhoneNumber</p>
            <p><strong>Adress:</strong> @customer.Address</p>

            <button class="btn btn-sm btn-warning" @onclick="() => EditCustomer(customer.Id)">Redigera</button>
        </div>
    }
}

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customers = await ApiService.GetCustomersAsync();
            filteredCustomers = customers;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customers: {ex.Message}");
        }
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register-customer");
    }

    private void EditCustomer(int id)
    {
        NavigationManager.NavigateTo($"/customers/edit/{id}");
    }

    private void SearchCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers
                .Where(c => c.Email != null && c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = "";
        filteredCustomers = customers;
    }
}
