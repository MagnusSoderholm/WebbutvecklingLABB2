@page "/api/products"
@using WebbutvecklingLABB2.Shared.Models
@inject HttpClient Http

<h3>Produktlista</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowAddProductModal">Lägg till Produkt</button>
    <input type="text" class="form-control mt-3" @bind="searchTerm" placeholder="Sök produkt..."/>
</div>

@if (products == null)
{
    <p>Laddar...</p>
}
else if (!filteredProducts.Any())
{

    <p>Inga produkter hittades.</p>
   <p>@Code</p>
    <p>@products.Count</p>
    <p>@filteredProducts.Count</p>
    <p>@Product.ToString()</p>
    <p>@Product.Id.Equals(2)</p>
    <li>@Product.Name</li>
     
}
else
{
    <div class="product-list">
        @foreach (var product in filteredProducts)
        {
            <div class="product-card">
                <h4>@product.Name</h4>
                <p>@product.Description</p>
                <p><strong>Pris:</strong> @product.Price SEK</p>
                <p><strong>Kategori:</strong> @product.Category</p>
                <p><strong>Status:</strong> @(product.IsDiscontinued ? "Utgått" : "Tillgänglig")</p>

                <button class="btn btn-warning" @onclick="() => EditProduct(product.Id)">Ändra</button>
                <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Ta bort</button>
                <button class="btn btn-secondary" @onclick="() => ToggleDiscontinuedStatus(product.Id)">
                    @(product.IsDiscontinued ? "Återställ" : "Markera som utgått")
                </button>
            </div>
        }
    </div>
}

@code {
    private string searchTerm = "";
    private List<Product> products = new List<Product>();
    private List<Product> filteredProducts = new List<Product>();

    private Product Product = new Product();
    private string Code = "Code";



    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Hämta alla produkter från API:et
            var response = await Http.GetAsync("https://localhost:7179/api/products");
            Code = response.StatusCode.ToString();

            // Kontrollera om API-anropet är framgångsrikt
            if (response.IsSuccessStatusCode)
            {
                // Läs innehållet som en lista av produkter
                var productsFromApi = await response.Content.ReadFromJsonAsync<List<Product>>();

                // Skriv ut svarsinnehållet (JSON) för att se om produkter finns
                Console.WriteLine("API-svar: " + await response.Content.ReadAsStringAsync());

                // Kontrollera om vi har några produkter
                if (productsFromApi != null && productsFromApi.Any())
                {
                    products = productsFromApi;
                    filteredProducts = products;
                }
                else
                {
                    Console.WriteLine("API-svaret var tomt eller null.");
                }
            }
            else
            {
                Console.WriteLine($"Fel: API-anropet misslyckades med statuskod: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fel vid API-anrop: {ex.Message}");
        }
    }




    private void SearchProducts()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                                    p.ProductNumber.Contains(searchTerm)).ToList();
        }
    }

    private async Task EditProduct(int productId)
    {
        // Logik för att uppdatera en produkt, t.ex. visa modal
    }

    private async Task DeleteProduct(int productId)
    {
        // Skicka borttagningsbegäran till API och uppdatera listan
        await Http.DeleteAsync($"api/products/{productId}");
        products = await Http.GetFromJsonAsync<List<Product>>("api/products");
        filteredProducts = products;
    }

    private async Task ToggleDiscontinuedStatus(int productId)
    {
        // Uppdatera status för produkt
        var product = products.FirstOrDefault(p => p.Id == productId);
        if (product != null)
        {
            product.IsDiscontinued = !product.IsDiscontinued;
            await Http.PutAsJsonAsync($"api/products/{productId}", product);
            products = await Http.GetFromJsonAsync<List<Product>>("api/products");
            filteredProducts = products;
        }
    }

    private void ShowAddProductModal()
    {
        // Visa en modal för att lägga till produkt
    }
}






@* //    protected override async Task OnInitializedAsync()
// {
//     try
//     {
//         // Hämta alla produkter från API:et
//         var response = await Http.GetAsync("https://localhost:7179/api/products");
//         Code = response.StatusCode.ToString();

//         // Kontrollera om API-anropet är framgångsrikt
//         if (response.IsSuccessStatusCode)
//         {
//             // Om API-svaret är framgångsrikt, hämta listan med produkter
//             var productsFromApi = await response.Content.ReadFromJsonAsync<List<Product>>();
//             if (productsFromApi != null && productsFromApi.Any())
//             {
//                 products = productsFromApi;
//                 filteredProducts = products;
//             }
//             else
//             {
//                 Console.WriteLine("API-svaret var tomt eller null.");
//             }
//         }
//         else
//         {
//             Console.WriteLine($"Fel: API-anropet misslyckades med statuskod: {response.StatusCode}");
//         }
//     }
//     catch (Exception ex)
//     {
//         Console.WriteLine($"Fel vid API-anrop: {ex.Message}");
//     }
// }
 *@



@* 
@page "/products"
@using WebbutvecklingLABB2.Shared.Models
@using WebbutvecklingLABB2.Client.Services
@inject ApiService ApiService

<h3>Produktlista</h3>

@if (products == null)
{
    <p>Laddar...</p>
}
else
{
    @foreach (var product in products)
    {
        <div class="product-card">
            <h4>@product.Name</h4>
            <p>@product.Description</p>
            <p><strong>Pris:</strong> @product.Price SEK</p>
            <p><strong>Kategori:</strong> @product.Category</p>
            <p><strong>Status:</strong> @(product.IsDiscontinued ? "Utgått" : "Tillgänglig")</p>
        </div>
    }
}

@code {
    private List<Product> products;

    // När komponenten initialiseras, hämta produkter via ApiService
    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ApiService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }
} *@
