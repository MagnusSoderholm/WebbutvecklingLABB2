@page "/products"
@using WebbutvecklingLABB2.Shared.Models
@using WebbutvecklingLABB2.Client.Services
@inject ApiService ApiService

<h3>Produktlista</h3>

<div>
    <input type="text" @bind="searchTerm" placeholder="Sök produkt..." />
    <button @onclick="SearchProducts">Sök</button>
</div>
<div>   
    <button @onclick="ShowAddProductModal">Lägg till produkt</button>
    </div>

@if (isAddModalVisible)
{
    <div class="modal-background">
        <div class="modal">
            <h3>@(editProduct.Id == 0 ? "Ny Produkt" : "Redigera Produkt")</h3>
            <input @bind="editProduct.Name" placeholder="Namn" />
            <input @bind="editProduct.ProductNumber" placeholder="Artikelnummer" />
            <input @bind="editProduct.Description" placeholder="Beskrivning" />
            <input type="number" @bind="editProduct.Price" placeholder="Pris" />
            <input @bind="editProduct.Category" placeholder="Kategori" />
            <label>
                <input type="checkbox" @bind="editProduct.IsDiscontinued" />
                Utgått
            </label>
            <button @onclick="SaveProduct">Spara</button>
            <button @onclick="CancelEdit">Avbryt</button>
        </div>
    </div>
}

@if (filteredProducts == null)
{
    <p>Laddar...</p>
}
else if (!filteredProducts.Any())
{
    <p>Inga produkter hittades.</p>
}
else
{
    @foreach (var product in filteredProducts)
    {
        <ProductCard Product="product" OnEdit="EditProduct" OnDelete="DeleteProduct" OnToggleStatus="ToggleDiscontinuedStatus" />
    }
}

@code {
    private string searchTerm = "";
    private List<Product> products = new();
    private List<Product> filteredProducts = new();
    private bool isAddModalVisible = false;
    private Product editProduct = new();

    protected override async Task OnInitializedAsync()
    {
        products = await ApiService.GetProductsAsync();
        filteredProducts = products;
    }

    private void SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p =>
                (p.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.ProductNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }
        StateHasChanged();
    }

    private void ShowAddProductModal()
    {
        editProduct = new Product();
        isAddModalVisible = true;
    }

    private void EditProduct(Product product)
    {
        editProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                ProductNumber = product.ProductNumber,
                Description = product.Description,
                Price = product.Price,
                Category = product.Category,
                IsDiscontinued = product.IsDiscontinued
            };
        isAddModalVisible = true;
    }

    private async Task SaveProduct()
    {
        if (editProduct.Id == 0)
        {
            await ApiService.AddProductAsync(editProduct);
        }
        else
        {
            await ApiService.UpdateProductAsync(editProduct);
        }

        products = await ApiService.GetProductsAsync();
        SearchProducts();
        isAddModalVisible = false;
    }

    private void CancelEdit()
    {
        isAddModalVisible = false;
    }

    private async Task DeleteProduct(Product product)
    {
        if (await ApiService.DeleteProductAsync(product.Id))
        {
            products.Remove(product);
            SearchProducts();
        }
    }

    private async Task ToggleDiscontinuedStatus(Product product)
    {
        product.IsDiscontinued = !product.IsDiscontinued;
        await ApiService.UpdateProductAsync(product);
        SearchProducts();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        SearchProducts();
    }
}
